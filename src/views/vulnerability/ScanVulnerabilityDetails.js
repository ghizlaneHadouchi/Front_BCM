import React, { useMemo, useState } from 'react'
import { useTable, usePagination } from 'react-table'
import 'react-datepicker/dist/react-datepicker.css'
import PropTypes from 'prop-types'
import LabeledField from '../../components/LabeledField.js'
import { scanData } from '../../lists/scanData.js'
import { useLocation } from 'react-router-dom'

const ScanVulnerabilityDetails = () => {
  const location = useLocation()
  const data = location.state.vulnerabilities
  const [isMainCardOpen, setIsMainOpen] = useState(true)
  //   const [filteredData, setFilteredData] = useState(data)

  const columns = useMemo(
    () => [
      { Header: 'Id', accessor: 'id' },
      { Header: 'Date de scan', accessor: 'scanDate' },
      { Header: 'Description', accessor: 'description' },
      { Header: 'Criticité', accessor: 'criticality' },
      { Header: 'Statut', accessor: 'status' },
      { Header: 'Établissement', accessor: 'institution' },
      { Header: 'Système', accessor: 'system' },
      { Header: 'Date de correction', accessor: 'correctionDate' },
    ],
    [],
  )

  const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    page,
    prepareRow,
    canPreviousPage,
    canNextPage,
    pageOptions,
    nextPage,
    previousPage,
    state: { pageIndex },
  } = useTable({ columns, data, initialState: { pageIndex: 0, pageSize: 12 } }, usePagination)

  return (
    <div>
      <div className="card-container" style={{ flex: 2 }}>
        <div className="card-header" onClick={() => setIsMainOpen((prev) => !prev)}>
          <h6>Table</h6>
          <div>
            {/* <button
              onClick={(e) => {
                e.stopPropagation()
                setIsAddModalOpen(true)
              }}
              style={{
                borderRadius: 20,
                backgroundColor: 'var(--nup-mid-blue)',
                color: 'var(--nup-white)',
                marginRight: 10,
              }}
            >
              + Ajout
            </button> */}
            <svg
              xmlns="http://www.w3.org/2000/svg"
              height="20px"
              viewBox="0 -960 960 960"
              width="20px"
              fill="var(--cui-body-color)"
              style={{
                transition: 'transform 1s',
                transform: isMainCardOpen ? 'rotate(90deg)' : 'rotate(0)',
              }}
            >
              <path d="m321-80-71-71 329-329-329-329 71-71 400 400L321-80Z" />
            </svg>
          </div>
        </div>

        <div className={`card-content ${isMainCardOpen ? 'open' : ''}`}>
          <div>
            <table {...getTableProps()} className="table">
              <thead>
                {headerGroups.map((headerGroup, index) => (
                  <tr key={index}>
                    {headerGroup.headers.map((column, columnIndex) => (
                      <th key={columnIndex}>{column.render('Header')}</th>
                    ))}
                  </tr>
                ))}
              </thead>
              <tbody {...getTableBodyProps()}>
                {page.map((row, rowIndex) => {
                  prepareRow(row)
                  return (
                    <React.Fragment key={row.id || rowIndex}>
                      {(() => {
                        const { key, ...rowProps } = row.getRowProps()
                        return (
                          <>
                            <tr key={key} {...rowProps}>
                              {row.cells.map((cell, cellIndex) => (
                                <td key={cellIndex}>{cell.render('Cell')}</td>
                              ))}
                            </tr>
                          </>
                        )
                      })()}
                    </React.Fragment>
                  )
                })}
              </tbody>
            </table>
            <div className="pagination">
              <button onClick={previousPage} disabled={!canPreviousPage}>
                Précédent
              </button>
              <span>
                Page{' '}
                <strong>
                  {pageIndex + 1} of {pageOptions.length}
                </strong>
              </span>
              <button onClick={nextPage} disabled={!canNextPage}>
                Suivant
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

ScanVulnerabilityDetails.propTypes = {
  row: PropTypes.object,
}

export default ScanVulnerabilityDetails
