import React, { useEffect, useMemo, useState } from 'react'
import { useTable, usePagination } from 'react-table'
import {
  CButton,
  CCol,
  CModal,
  CModalBody,
  CModalFooter,
  CModalHeader,
  CModalTitle,
  CRow,
  CSpinner,
  CTooltip,
} from '@coreui/react'
import PropTypes from 'prop-types'
import {
  createIncident,
  getAllIncidents,
  getIncidentsByParticipants,
  getIncidentsBySeverityLevel,
  getIncidentsByStatus,
  getIncidentsBySystem,
  getIncidentsForTableDashboard,
  getTotalIncidentsAndNonResolvedByParticipants,
  updateIncident,
} from '../../hooks/incident.js'
import BasicLineChart from '../../components/BasicLineChart.js'
import DoubleBarChart from '../../components/DoubleBarChart.js'
import StackedLineChart from '../../components/StackedLineChart.js'
import Card from '../../components/Card.js'
import { FaInfoCircle, FaSearch } from 'react-icons/fa'
import { BsTable } from 'react-icons/bs'
import { GoGraph } from 'react-icons/go'
import { IoIosCheckmarkCircleOutline } from 'react-icons/io'
import Kpi from '../../components/Kpi.js'
import PieChart from '../../components/PieChart.js'
import LabeledField from '../../components/LabeledField.js'
import MixedLineBarChart from '../../components/MixedLineBarChart.js'
import TypeButton from '../../components/TypeButton.js'
import SearchButton from '../../components/SearchButton.js'

const VulnerabilityManagement = () => {
  const [cardStates, setCardStates] = useState({
    filter: true,
    table: true,
    dashboard: true,
    totalIncidents: true,
    incidentsByParticipant: true,
    severityByParticipant: true,
    vulnerabilitiesRepartition: true,
  })
  const [isDashboardCardOpen, setIsDashboardCardOpen] = useState(true)
  const [shownData, setShownData] = useState('table')
  const [startDate, setStartDate] = useState('')
  const [endDate, setEndDate] = useState('')
  const [system, setSystem] = useState('')
  const [filteredIncidents, setFilteredIncidents] = useState([])
  const [isAddModalOpen, setIsAddModalOpen] = useState(false)
  const [isCorrectModalOpen, setIsCorrectModalOpen] = useState(false)
  const [correctionData, setCorrectionData] = useState({
    id: '',
    Status: '',
    ResolutionDescription: '',
    CorrectionDate: '',
  })
  const [formData, setFormData] = useState({
    ReportedDate: '',
    Description: '',
    SeverityLevel: '',
    Status: '',
    IncidentType: '',
    ReportedBy: '',
    AssignedTo: '',
    ResolutionDescription: '',
    CorrectionDate: '',
    System: '',
  })
  const toggleCard = (card) => setCardStates((prev) => ({ ...prev, [card]: !prev[card] }))
  const { dashboardData, loading } = getIncidentsForTableDashboard()
  const incidentsByParticipants = getIncidentsByParticipants()
  const incidentsBySeverityLevel = getIncidentsBySeverityLevel()
  const incidentsByStatus = getIncidentsByStatus()
  const incidentsBySystem = getIncidentsBySystem()
  const totalIncidentsByPartipants = getTotalIncidentsAndNonResolvedByParticipants()
  const { incidents, isTableLoading } = getAllIncidents()

  const severityLevelPieChartData = useMemo(
    () =>
      incidentsBySeverityLevel.map((i) => {
        return {
          value: i.count,
          name: i.SeverityLevel,
        }
      }),
    [incidentsBySeverityLevel],
  )

  const statusPieChartData = useMemo(
    () =>
      incidentsByStatus.map((i) => {
        return {
          value: i.count,
          name: i.Status,
        }
      }),
    [incidentsByStatus],
  )

  const systemPieChartData = useMemo(
    () =>
      incidentsBySystem.map((i) => {
        return {
          value: i.count,
          name: i.System,
        }
      }),
    [incidentsBySystem],
  )

  const participantsPieChartData = useMemo(
    () =>
      totalIncidentsByPartipants.map((i) => {
        return {
          value: i.total_incidents,
          name: i.reportedBy,
        }
      }),
    [totalIncidentsByPartipants],
  )

  const clearCorrectionInputs = () => {
    setCorrectionData({
      id: '',
      Status: '',
      ResolutionDescription: '',
      CorrectionDate: '',
    })
  }

  const clearInputs = () => {
    setFormData({
      ReportedDate: '',
      Description: '',
      SeverityLevel: '',
      Status: '',
      IncidentType: '',
      ReportedBy: '',
      AssignedTo: '',
      ResolutionDescription: '',
      CorrectionDate: '',
      System: '',
    })
  }

  useEffect(() => {
    const updatedIncidents = incidents.map((incident) => ({
      ...incident,
      scanId: Math.floor(Math.random() * 20) + 1,
    }))

    setFilteredIncidents(updatedIncidents)
  }, [incidents])

  const handleChange = (e) => {
    const { name, value } = e.target
    setFormData((prevState) => ({
      ...prevState,
      [name]: value,
    }))
  }

  const handleChangeCorrection = (e) => {
    const { name, value } = e.target
    setCorrectionData((prevState) => ({
      ...prevState,
      [name]: value,
    }))
  }

  const handleSubmit = async () => {
    const createdIncident = await createIncident(formData)
    setFilteredIncidents((prev) => [...prev, createdIncident])
    setIsAddModalOpen(false)
    clearInputs()
  }

  const tableStats = dashboardData[0] || {}
  const {
    total_incidents_all_months: totalIncidentsAllMonths,
    resolved_count_all_months: resolvedCountAllMonths,
    // in_progress_count_all_months: inProgressCountAllMonths,
    non_resolved_count_all_months: nonResolvedCountAllMonths,
    // minor_severity_count_all_months: minorSeverityCountAllMonths,
    // major_severity_count_all_months: majorSeverityCountAllMonths,
    // critical_severity_count_all_months: criticalSeverityCountAllMonths,
  } = tableStats

  const columnsDashboard = useMemo(
    () => [
      { Header: 'Mois', accessor: 'month' },
      { Header: 'Nombre Vulnérabilités', accessor: 'total_incidents' },
      { Header: 'Vulnérabilités Résolus', accessor: 'resolved_count' },
      { Header: 'Vulnérabilités En Cours', accessor: 'in_progress_count' },
      { Header: 'Vulnérabilités Non Résolus', accessor: 'non_resolved_count' },
      { Header: 'Mineur', accessor: 'minor_severity_count' },
      { Header: 'Majeur', accessor: 'major_severity_count' },
      { Header: 'Critique', accessor: 'critical_severity_count' },
    ],
    [],
  )

  const columnsTable = useMemo(
    () => [
      { Header: 'Id', accessor: 'id' },
      { Header: 'Id Scan', accessor: 'scanId' },
      { Header: 'Date de détection', accessor: 'ReportedDate' },
      { Header: 'Description', accessor: 'Description' },
      { Header: 'Criticité', accessor: 'SeverityLevel' },
      { Header: 'Statut', accessor: 'Status' },
      { Header: 'Système', accessor: 'System' },
      { Header: 'Participants', accessor: 'ReportedBy' },
      { Header: 'Date de correction', accessor: 'CorrectionDate' },
      { Header: 'Actions', accessor: 'actions' },
    ],
    [],
  )

  const tableData = useMemo(() => filteredIncidents, [filteredIncidents])

  const tableInstance = useTable(
    {
      columns: shownData === 'table' ? columnsTable : columnsDashboard,
      data: shownData === 'table' ? tableData : dashboardData,
      initialState: { pageIndex: 0, pageSize: 12 },
    },
    usePagination,
  )

  const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    page,
    prepareRow,
    canPreviousPage,
    canNextPage,
    pageOptions,
    nextPage,
    previousPage,
    state: { pageIndex },
    gotoPage,
  } = tableInstance

  const basicLineChartData = useMemo(
    () => ({
      xAxisData: dashboardData.map((d) => d.month).sort((a, b) => new Date(a) - new Date(b)),
      seriesData: dashboardData.map((d) => d.total_incidents),
    }),
    [dashboardData],
  )

  const { xAxisData1, data1 } = useMemo(() => {
    const xAxisData = totalIncidentsByPartipants.map((i) => i.reportedBy)

    const data = ['total_incidents', 'non_resolved_count'].map((key, index) => ({
      name: ['Total Incidents', 'Incidents Non Résolus'][index],
      values: totalIncidentsByPartipants.map((i) => i[key]),
      color: ['#5c74cc', '#e66a68'][index],
    }))

    return { xAxisData1: xAxisData, data1: data }
  }, [totalIncidentsByPartipants])

  const stackedLineData = useMemo(() => {
    const xAxisData = [...new Set(incidentsByParticipants.map((d) => d.month))].sort(
      (a, b) => new Date(a) - new Date(b),
    )

    const legendData = [...new Set(incidentsByParticipants.map((i) => i.reportedBy))]

    const seriesData = legendData.map((reportedBy) => ({
      name: reportedBy,
      type: 'line',
      stack: 'Total',
      data: xAxisData.map((month) =>
        incidentsByParticipants
          .filter((i) => i.reportedBy === reportedBy && i.month === month)
          .reduce((sum, i) => sum + i.total_incidents, 0),
      ),
    }))

    return { xAxisData, legendData, seriesData }
  }, [incidentsByParticipants])

  const handleFilter = (e) => {
    e && e.preventDefault()

    const filtered = tableData.filter((item) => {
      const matchesSystem = system ? item.ReportedBy === system : true

      const matchesDateRange =
        startDate && endDate
          ? new Date(item.ReportedDate) >= new Date(startDate) &&
            new Date(item.ReportedDate) <= new Date(endDate)
          : true

      return matchesSystem && matchesDateRange
    })

    setFilteredIncidents(filtered)
  }

  const globalViewPieChart = useMemo(
    () => [
      { value: resolvedCountAllMonths, name: 'Résolus' },
      { value: nonResolvedCountAllMonths, name: 'Non Résolus' },
    ],
    [dashboardData],
  )

  const colors = useMemo(() => ['#32de84', '#D2122E'], [])

  const handleCorrectionSubmit = async (id, Status, CorrectionDate, ResolutionDescription) => {
    const updatedIncident = await updateIncident(id, Status, CorrectionDate, ResolutionDescription)
    console.log(updatedIncident)

    setFilteredIncidents((prevIncidents) => {
      const incidentIndex = prevIncidents.findIndex((incident) => incident.id === id)
      if (incidentIndex !== -1) {
        const updatedIncidents = [...prevIncidents]
        updatedIncidents[incidentIndex] = {
          ...updatedIncidents[incidentIndex],
          Status: updatedIncident.Status,
          CorrectionDate: updatedIncident.CorrectionDate,
          ResolutionDescription: updatedIncident.ResolutionDescription,
        }
        return updatedIncidents
      }
      return prevIncidents
    })

    setIsCorrectModalOpen(false)
  }

  const systems = Array.from(new Set(tableData.map((t) => t.ReportedBy)))

  const mixedLineBarChartData = useMemo(() => {
    return {
      xAxisData: [
        'Jan',
        'Feb',
        'Mar',
        'Apr',
        'May',
        'Jun',
        'Jul',
        'Aug',
        'Sep',
        'Oct',
        'Nov',
        'Dec',
      ],
      barData: [150, 130, 120, 80, 145, 110, 90, 120, 140, 130, 110, 100],
      lineData: [70, 90, 60, 40, 50, 70, 30, 28, 60, 30, 40, 45],
      barName: 'Nbrs Total de scans',
      lineName: 'Nombre de vulnérabilités détectées',
      barYAxis: {
        min: 0,
        max: 160,
        interval: 20,
      },
      lineYAxis: {
        min: 0,
        max: 160,
        interval: 20,
      },
    }
  }, [])

  const mixedLineBarChartData1 = useMemo(() => {
    return {
      xAxisData: [
        'Jan',
        'Feb',
        'Mar',
        'Apr',
        'May',
        'Jun',
        'Jul',
        'Aug',
        'Sep',
        'Oct',
        'Nov',
        'Dec',
      ],
      barData: [25, 29, 32, 24, 16, 12, 9, 18, 14, 13, 17, 22],
      lineData: [11, 14, 10, 16, 8, 7, 20, 21, 6, 20, 25, 23],
      barName: 'Nombre de vulnérabilités résolues',
      lineName: 'Temps de résolution moyen (en jours)',
      barYAxis: {
        min: 0,
        max: 40,
        interval: 5,
      },
      lineYAxis: {
        min: 0,
        max: 40,
        interval: 5,
      },
    }
  }, [])

  const titleStyle = {
    display: 'flex',
    justifyContent: 'center',
  }

  return (
    <div>
      <Card
        title="Filtre"
        isCardOpen={cardStates.filter}
        setIsCardOpen={() => toggleCard('filter')}
        content={
          <>
            <div
              style={{
                marginTop: 10,
                display: 'flex',
                flexDirection: 'column',
                gap: 10,
                alignItems: 'center',
                justifyContent: 'center',
                width: '100%',
              }}
            >
              <div style={{ display: 'flex', gap: 10 }}>
                <input
                  placeholder="Système ..."
                  type="text"
                  list="système"
                  value={system}
                  onChange={(e) => setSystem(e.target.value)}
                  style={{ padding: '6px 10px' }}
                />
                <datalist id="système">
                  {systems.map((s) => (
                    <option key={s} value={s} />
                  ))}{' '}
                </datalist>

                <input
                  placeholder="De"
                  selected={startDate}
                  onChange={(e) => setStartDate(e.target.value)}
                  type="date"
                />

                <input
                  placeholder="À"
                  selected={endDate}
                  onChange={(e) => setEndDate(e.target.value)}
                  type="date"
                />
              </div>

              <SearchButton handleFilter={handleFilter} />
            </div>
            <hr />
            <div>
              <div style={{ display: 'flex', justifyContent: 'space-around' }}>
                <TypeButton
                  Icon={<BsTable size={16} />}
                  onClick={() => setShownData('table')}
                  isSelected={shownData === 'table'}
                  title="Détails Vulnérabilités"
                />
                <TypeButton
                  Icon={<GoGraph size={16} />}
                  onClick={() => setShownData('graph')}
                  isSelected={shownData === 'graph'}
                  title="Reporting"
                />
              </div>
            </div>
          </>
        }
      />
      {!loading && shownData === 'graph' ? (
        <>
          <Card
            title="Dashboard Vulnérabilités"
            isCardOpen={cardStates.dashboard}
            setIsCardOpen={() => toggleCard('dashboard')}
            content={
              <>
                <CRow>
                  <CCol xs={3}>
                    <Kpi title="Nombre Total Vulnérabilités" data={totalIncidentsAllMonths} />
                    <Kpi
                      title="Nombre Total Vulnérabilités Non Résolus"
                      data={nonResolvedCountAllMonths}
                    />
                  </CCol>

                  <CCol xs={3}>
                    <Kpi
                      title="Nombre Total Vulnérabilités Résolus"
                      data={resolvedCountAllMonths}
                    />
                    <Kpi title="Temps de Résolution Moyen (par jour)" data="1" />
                  </CCol>
                  <CCol xs={6}>
                    <PieChart
                      subtext=""
                      data={globalViewPieChart}
                      isLegendShown={false}
                      colors={colors}
                      isLabelShown={true}
                    />
                  </CCol>
                </CRow>
                <div style={{ display: 'flex' }}></div>

                <table {...getTableProps()} className="table">
                  <thead>
                    {headerGroups.map((headerGroup, index) => (
                      <tr key={index}>
                        {headerGroup.headers.map((column, columnIndex) => (
                          <th key={columnIndex}>{column.render('Header')}</th>
                        ))}
                      </tr>
                    ))}
                  </thead>
                  <tbody {...getTableBodyProps()}>
                    {page.map((row, rowIndex) => {
                      prepareRow(row)
                      return (
                        <React.Fragment key={row.id || rowIndex}>
                          {(() => {
                            const { key, ...rowProps } = row.getRowProps()
                            return (
                              <>
                                <tr key={key} {...rowProps}>
                                  {row.cells.map((cell, cellIndex) => (
                                    <td key={cellIndex}>{cell.render('Cell')}</td>
                                  ))}
                                </tr>
                              </>
                            )
                          })()}
                        </React.Fragment>
                      )
                    })}
                  </tbody>
                </table>
                <div className="pagination">
                  <button onClick={previousPage} disabled={!canPreviousPage}>
                    Précédent
                  </button>
                  <span>
                    Page {pageIndex + 1} of {pageOptions.length}
                  </span>
                  <button onClick={nextPage} disabled={!canNextPage}>
                    Suivant
                  </button>
                </div>
              </>
            }
          />
          <Card
            title="Total Vulnérabilités"
            isCardOpen={cardStates.totalIncidents}
            setIsCardOpen={() => toggleCard('totalIncidents')}
            content={
              <BasicLineChart
                xAxisData={basicLineChartData.xAxisData}
                seriesData={basicLineChartData.seriesData}
              />
            }
          />
          <Card
            title="Total Vulnérabilités par Participants"
            isCardOpen={cardStates.incidentsByParticipant}
            setIsCardOpen={() => toggleCard('incidentsByParticipant')}
            content={
              <StackedLineChart
                legendData={stackedLineData.legendData}
                xAxisData={stackedLineData.xAxisData}
                seriesData={stackedLineData.seriesData}
              />
            }
          />
          <Card
            title="Total Vulnérabilités et Vulnérabilités Non Résolus par Participants"
            isCardOpen={cardStates.severityByParticipant}
            setIsCardOpen={() => toggleCard('severityByParticipant')}
            content={<DoubleBarChart xAxisData={xAxisData1} data={data1} />}
          />
          <Card
            title="Répartition des Vulnérabilités"
            isCardOpen={cardStates.vulnerabilitiesRepartition}
            setIsCardOpen={() => toggleCard('vulnerabilitiesRepartition')}
            content={
              <CRow>
                <CCol xs={6}>
                  <PieChart subtext="" data={severityLevelPieChartData} height="var(--chart-300)" />
                </CCol>
                <CCol xs={6}>
                  <PieChart subtext="" data={statusPieChartData} height="var(--chart-300)" />
                </CCol>
                <CCol xs={6}>
                  <PieChart subtext="" data={participantsPieChartData} height="var(--chart-300)" />
                </CCol>
                <CCol xs={6}>
                  <PieChart subtext="" data={systemPieChartData} height="var(--chart-300)" />
                </CCol>
              </CRow>
            }
          />
          <div className="card-container" style={{ flex: 2 }}>
            <div className="card-header" onClick={() => setIsDashboardCardOpen((prev) => !prev)}>
              <h6 style={{ textAlign: 'center', width: '100%' }}>
                Analyses de vulnérabilité et MTTR (Main Time To Resolve)
              </h6>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                height="20px"
                viewBox="0 -960 960 960"
                width="20px"
                fill="var(--cui-body-color)"
                style={{
                  marginLeft: 'auto',
                  transition: 'transform 1s',
                  transform: isDashboardCardOpen ? 'rotate(90deg)' : 'rotate(0)',
                }}
              >
                <path d="m321-80-71-71 329-329-329-329 71-71 400 400L321-80Z" />
              </svg>
            </div>
            <div className={`card-content ${isDashboardCardOpen ? 'open' : ''}`}>
              <div>
                <h6 style={titleStyle}>Scans effectués et vulnérabilités détectées</h6>
                <div style={{ display: 'flex' }}>
                  <MixedLineBarChart
                    xAxisData={mixedLineBarChartData.xAxisData}
                    barData={mixedLineBarChartData.barData}
                    lineData={mixedLineBarChartData.lineData}
                    barName={mixedLineBarChartData.barName}
                    lineName={mixedLineBarChartData.lineName}
                    barYAxis={mixedLineBarChartData.barYAxis}
                    lineYAxis={mixedLineBarChartData.lineYAxis}
                    firstChartType="line"
                    secondChartType="line"
                  />
                </div>
              </div>
              <h6 style={titleStyle}>Vulnérabilités résolues et temps de résolution</h6>
              <MixedLineBarChart
                xAxisData={mixedLineBarChartData1.xAxisData}
                barData={mixedLineBarChartData1.barData}
                lineData={mixedLineBarChartData1.lineData}
                barName={mixedLineBarChartData1.barName}
                lineName={mixedLineBarChartData1.lineName}
                barYAxis={mixedLineBarChartData1.barYAxis}
                lineYAxis={mixedLineBarChartData1.lineYAxis}
                firstChartType="line"
                secondChartType="line"
              />
            </div>
          </div>
        </>
      ) : !isTableLoading && shownData === 'table' ? (
        <Card
          title="Liste Des Vulnérabilités"
          isCardOpen={cardStates.table}
          setIsCardOpen={() => toggleCard('table')}
          content={
            <div style={{ display: 'flex', flexDirection: 'column' }}>
              <button
                onClick={(e) => {
                  e.stopPropagation()
                  setIsAddModalOpen(true)
                }}
                style={{
                  borderRadius: 20,
                  backgroundColor: 'var(--nup-mid-blue)',
                  color: 'var(--nup-white)',
                  marginRight: 10,
                  maxWidth: 100,
                  alignSelf: 'flex-end',
                }}
              >
                + Ajouter
              </button>
              <div>
                <table {...getTableProps()} className="table">
                  <thead>
                    {headerGroups.map((headerGroup, index) => (
                      <tr key={index}>
                        {headerGroup.headers.map((column, columnIndex) => (
                          <th key={columnIndex}>{column.render('Header')}</th>
                        ))}
                      </tr>
                    ))}
                  </thead>
                  <tbody {...getTableBodyProps()}>
                    {page.map((row, rowIndex) => {
                      prepareRow(row)
                      return (
                        <React.Fragment key={row.id || rowIndex}>
                          {(() => {
                            const { key, ...rowProps } = row.getRowProps()
                            return (
                              <>
                                <tr key={key} {...rowProps}>
                                  {row.cells.map((cell, cellIndex) => (
                                    <td key={cellIndex}>
                                      {cell.column.id === 'Description' ||
                                      cell.column.id === 'ResolutionDescription' ? (
                                        <CTooltip content={<div>{cell.value}</div>} placement="top">
                                          <span>
                                            <FaInfoCircle style={{ cursor: 'pointer' }} />
                                          </span>
                                        </CTooltip>
                                      ) : cell.column.id === 'actions' &&
                                        row.original.Status !== 'Résolu' ? (
                                        <button
                                          onClick={() => {
                                            setIsCorrectModalOpen(true)
                                            setCorrectionData({
                                              id: row.original.id,
                                              Status: 'Résolu',
                                              CorrectionDate: row.original.CorrectionDate,
                                              ResolutionDescription:
                                                row.original.ResolutionDescription || '',
                                            })
                                          }}
                                          style={{
                                            display: 'flex',
                                            alignItems: 'center',
                                            cursor: 'pointer',
                                            border: '1px solid green',
                                            backgroundColor: 'rgba(0,245,0,0.2)',
                                            color: 'green',
                                            borderRadius: 10,
                                          }}
                                        >
                                          <IoIosCheckmarkCircleOutline size={18} />
                                          <span>Fixer</span>
                                        </button>
                                      ) : (
                                        cell.render('Cell')
                                      )}
                                    </td>
                                  ))}
                                </tr>
                              </>
                            )
                          })()}
                        </React.Fragment>
                      )
                    })}
                  </tbody>
                </table>
                <div className="pagination">
                  <button onClick={previousPage} disabled={!canPreviousPage}>
                    Précédent
                  </button>
                  <span>
                    Page{' '}
                    <strong>
                      {pageIndex + 1} of {pageOptions.length}
                    </strong>
                  </span>
                  <button onClick={nextPage} disabled={!canNextPage}>
                    Suivant
                  </button>
                </div>
              </div>
            </div>
          }
        />
      ) : (
        <CSpinner />
      )}
      <CModal size="lg" visible={isAddModalOpen} onClose={() => setIsAddModalOpen(false)}>
        <CModalHeader>
          <CModalTitle>Ajout Vulnérabilité</CModalTitle>
        </CModalHeader>
        <CModalBody>
          <div style={{ display: 'flex', justifyContent: 'space-between', gap: 10 }}>
            <LabeledField
              label="Date de détection"
              name="ReportedDate"
              type="date"
              value={formData.ReportedDate}
              onChange={handleChange}
            />
            <LabeledField
              label="Assigné À"
              name="AssignedTo"
              value={formData.AssignedTo}
              onChange={handleChange}
            />
            <LabeledField
              label="Statut"
              name="Status"
              isSelect={true}
              options={[
                { label: '', value: '', disabled: true },
                {
                  label: 'Résolue',
                  value: 'résolue',
                },
                {
                  label: 'Non Résolue',
                  value: 'non résolue',
                },
                {
                  label: 'En Cours',
                  value: 'en cours',
                },
              ]}
              value={formData.Status}
              onChange={handleChange}
            />
          </div>
          <div style={{ display: 'flex', justifyContent: 'space-between', gap: 10 }}>
            <LabeledField
              label="Date de correction"
              name="CorrectionDate"
              type="date"
              value={formData.CorrectionDate}
              onChange={handleChange}
            />
            <LabeledField
              label="Participant"
              name="ReportedBy"
              value={formData.ReportedBy}
              onChange={handleChange}
            />
            <LabeledField
              label="Criticité"
              name="SeverityLevel"
              value={formData.SeverityLevel}
              onChange={handleChange}
            />
          </div>
          <div style={{ display: 'flex', justifyContent: 'space-between', gap: 10 }}>
            <LabeledField
              label="Type de Vulnérabilités"
              name="IncidentType"
              isSelect={true}
              options={[
                { label: '', value: '', disabled: true },
                {
                  label: 'Retard Service',
                  value: 'Retard Service',
                },
                {
                  label: 'Fraude',
                  value: 'Fraude',
                },
                {
                  label: 'Défaillance du Système',
                  value: 'défaillance du système',
                },
              ]}
              value={formData.IncidentType}
              onChange={handleChange}
            />
            <LabeledField
              label="Système"
              name="System"
              value={formData.System}
              onChange={handleChange}
            />
            <LabeledField
              label="Description de Résolution"
              name="ResolutionDescription"
              isTextArea={true}
              value={formData.ResolutionDescription}
              onChange={handleChange}
            />
          </div>
          <LabeledField
            label="Description"
            name="Description"
            isTextArea={true}
            value={formData.Description}
            onChange={handleChange}
          />
        </CModalBody>
        <CModalFooter>
          <CButton color="secondary" onClick={() => setIsAddModalOpen(false)}>
            Fermer
          </CButton>
          <CButton color="primary" onClick={handleSubmit}>
            Confirmer
          </CButton>
        </CModalFooter>
      </CModal>
      <CModal size="lg" visible={isCorrectModalOpen} onClose={() => setIsCorrectModalOpen(false)}>
        <CModalHeader>
          <CModalTitle>Ajout Vulnérabilité</CModalTitle>
        </CModalHeader>
        <CModalBody>
          <div style={{ display: 'flex', justifyContent: 'space-around', gap: 10 }}>
            <LabeledField
              label="Date de correction"
              name="CorrectionDate"
              type="date"
              value={correctionData.CorrectionDate}
              onChange={handleChangeCorrection}
            />
            <LabeledField
              label="Description de Résolution"
              name="ResolutionDescription"
              isTextArea={true}
              value={correctionData.ResolutionDescription}
              onChange={handleChangeCorrection}
            />
          </div>
        </CModalBody>
        <CModalFooter>
          <CButton
            color="secondary"
            onClick={() => {
              setIsCorrectModalOpen(false)
              clearCorrectionInputs()
            }}
          >
            Fermer
          </CButton>
          <CButton
            color="primary"
            onClick={() =>
              handleCorrectionSubmit(
                correctionData.id,
                correctionData.Status,
                correctionData.CorrectionDate,
                correctionData.ResolutionDescription,
              )
            }
          >
            Confirmer
          </CButton>
        </CModalFooter>
      </CModal>
    </div>
  )
}

VulnerabilityManagement.propTypes = {
  row: PropTypes.object,
}

export default VulnerabilityManagement
